// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: product_query.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createProduct = `-- name: CreateProduct :one
insert into products (product_code) values ($1) returning uuid
`

func (q *Queries) CreateProduct(ctx context.Context, productCode string) (pgtype.UUID, error) {
	row := q.db.QueryRow(ctx, createProduct, productCode)
	var uuid pgtype.UUID
	err := row.Scan(&uuid)
	return uuid, err
}

const deleteProduct = `-- name: DeleteProduct :one
delete from products where uuid = $1 returning uuid
`

func (q *Queries) DeleteProduct(ctx context.Context, uuid pgtype.UUID) (pgtype.UUID, error) {
	row := q.db.QueryRow(ctx, deleteProduct, uuid)
	err := row.Scan(&uuid)
	return uuid, err
}

const getStoreAmount = `-- name: GetStoreAmount :one
select store_amount from products where uuid = $1
`

func (q *Queries) GetStoreAmount(ctx context.Context, uuid pgtype.UUID) (pgtype.Numeric, error) {
	row := q.db.QueryRow(ctx, getStoreAmount, uuid)
	var store_amount pgtype.Numeric
	err := row.Scan(&store_amount)
	return store_amount, err
}

const setStoreAmount = `-- name: SetStoreAmount :exec
update products set store_amount = $1 where uuid = $2
`

type SetStoreAmountParams struct {
	StoreAmount pgtype.Numeric
	Uuid        pgtype.UUID
}

func (q *Queries) SetStoreAmount(ctx context.Context, arg SetStoreAmountParams) error {
	_, err := q.db.Exec(ctx, setStoreAmount, arg.StoreAmount, arg.Uuid)
	return err
}

const setStoreCost = `-- name: SetStoreCost :exec
update products set store_cost = $1 where uuid = $2
`

type SetStoreCostParams struct {
	StoreCost pgtype.Numeric
	Uuid      pgtype.UUID
}

func (q *Queries) SetStoreCost(ctx context.Context, arg SetStoreCostParams) error {
	_, err := q.db.Exec(ctx, setStoreCost, arg.StoreCost, arg.Uuid)
	return err
}
