// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package db

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type SupplyStatus string

const (
	SupplyStatusCreated   SupplyStatus = "created"
	SupplyStatusInWork    SupplyStatus = "in_work"
	SupplyStatusServed    SupplyStatus = "served"
	SupplyStatusOnTheRoad SupplyStatus = "on_the_road"
	SupplyStatusShipped   SupplyStatus = "shipped"
	SupplyStatusDone      SupplyStatus = "done"
)

func (e *SupplyStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = SupplyStatus(s)
	case string:
		*e = SupplyStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for SupplyStatus: %T", src)
	}
	return nil
}

type NullSupplyStatus struct {
	SupplyStatus SupplyStatus
	Valid        bool // Valid is true if SupplyStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullSupplyStatus) Scan(value interface{}) error {
	if value == nil {
		ns.SupplyStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.SupplyStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullSupplyStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.SupplyStatus), nil
}

type Product struct {
	Uuid        pgtype.UUID
	ProductCode string
	StoreCost   pgtype.Numeric
	StoreAmount pgtype.Numeric
}

type Supply struct {
	Uuid            pgtype.UUID
	Comment         pgtype.Text
	CreationDate    pgtype.Timestamp
	DesiredDate     pgtype.Timestamp
	Status          SupplyStatus
	ResponsibleUser string
	Edited          pgtype.Bool
	EditedDate      pgtype.Timestamp
	Cost            pgtype.Numeric
}

type SupplyProduct struct {
	ProductUuid pgtype.UUID
	SupplyUuid  pgtype.UUID
	Amount      pgtype.Numeric
}
