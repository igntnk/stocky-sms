// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.0
// source: sms.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ProductService_CreateProduct_FullMethodName  = "/uas.ProductService/CreateProduct"
	ProductService_DeleteProduct_FullMethodName  = "/uas.ProductService/DeleteProduct"
	ProductService_SetStoreCost_FullMethodName   = "/uas.ProductService/SetStoreCost"
	ProductService_SetStoreAmount_FullMethodName = "/uas.ProductService/SetStoreAmount"
	ProductService_GetStoreAmount_FullMethodName = "/uas.ProductService/GetStoreAmount"
)

// ProductServiceClient is the client API for ProductService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProductServiceClient interface {
	CreateProduct(ctx context.Context, in *CreateProductMessage, opts ...grpc.CallOption) (*UuidResponse, error)
	DeleteProduct(ctx context.Context, in *UuidRequest, opts ...grpc.CallOption) (*UuidResponse, error)
	SetStoreCost(ctx context.Context, in *SetProductCostRequest, opts ...grpc.CallOption) (*UuidResponse, error)
	SetStoreAmount(ctx context.Context, in *SetProductAmountRequest, opts ...grpc.CallOption) (*UuidResponse, error)
	GetStoreAmount(ctx context.Context, in *UuidRequest, opts ...grpc.CallOption) (*GetStoreAmountResponse, error)
}

type productServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProductServiceClient(cc grpc.ClientConnInterface) ProductServiceClient {
	return &productServiceClient{cc}
}

func (c *productServiceClient) CreateProduct(ctx context.Context, in *CreateProductMessage, opts ...grpc.CallOption) (*UuidResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UuidResponse)
	err := c.cc.Invoke(ctx, ProductService_CreateProduct_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) DeleteProduct(ctx context.Context, in *UuidRequest, opts ...grpc.CallOption) (*UuidResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UuidResponse)
	err := c.cc.Invoke(ctx, ProductService_DeleteProduct_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) SetStoreCost(ctx context.Context, in *SetProductCostRequest, opts ...grpc.CallOption) (*UuidResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UuidResponse)
	err := c.cc.Invoke(ctx, ProductService_SetStoreCost_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) SetStoreAmount(ctx context.Context, in *SetProductAmountRequest, opts ...grpc.CallOption) (*UuidResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UuidResponse)
	err := c.cc.Invoke(ctx, ProductService_SetStoreAmount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) GetStoreAmount(ctx context.Context, in *UuidRequest, opts ...grpc.CallOption) (*GetStoreAmountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetStoreAmountResponse)
	err := c.cc.Invoke(ctx, ProductService_GetStoreAmount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProductServiceServer is the server API for ProductService service.
// All implementations must embed UnimplementedProductServiceServer
// for forward compatibility.
type ProductServiceServer interface {
	CreateProduct(context.Context, *CreateProductMessage) (*UuidResponse, error)
	DeleteProduct(context.Context, *UuidRequest) (*UuidResponse, error)
	SetStoreCost(context.Context, *SetProductCostRequest) (*UuidResponse, error)
	SetStoreAmount(context.Context, *SetProductAmountRequest) (*UuidResponse, error)
	GetStoreAmount(context.Context, *UuidRequest) (*GetStoreAmountResponse, error)
	mustEmbedUnimplementedProductServiceServer()
}

// UnimplementedProductServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedProductServiceServer struct{}

func (UnimplementedProductServiceServer) CreateProduct(context.Context, *CreateProductMessage) (*UuidResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProduct not implemented")
}
func (UnimplementedProductServiceServer) DeleteProduct(context.Context, *UuidRequest) (*UuidResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProduct not implemented")
}
func (UnimplementedProductServiceServer) SetStoreCost(context.Context, *SetProductCostRequest) (*UuidResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetStoreCost not implemented")
}
func (UnimplementedProductServiceServer) SetStoreAmount(context.Context, *SetProductAmountRequest) (*UuidResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetStoreAmount not implemented")
}
func (UnimplementedProductServiceServer) GetStoreAmount(context.Context, *UuidRequest) (*GetStoreAmountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStoreAmount not implemented")
}
func (UnimplementedProductServiceServer) mustEmbedUnimplementedProductServiceServer() {}
func (UnimplementedProductServiceServer) testEmbeddedByValue()                        {}

// UnsafeProductServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductServiceServer will
// result in compilation errors.
type UnsafeProductServiceServer interface {
	mustEmbedUnimplementedProductServiceServer()
}

func RegisterProductServiceServer(s grpc.ServiceRegistrar, srv ProductServiceServer) {
	// If the following call pancis, it indicates UnimplementedProductServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ProductService_ServiceDesc, srv)
}

func _ProductService_CreateProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProductMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).CreateProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_CreateProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).CreateProduct(ctx, req.(*CreateProductMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_DeleteProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UuidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).DeleteProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_DeleteProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).DeleteProduct(ctx, req.(*UuidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_SetStoreCost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetProductCostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).SetStoreCost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_SetStoreCost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).SetStoreCost(ctx, req.(*SetProductCostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_SetStoreAmount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetProductAmountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).SetStoreAmount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_SetStoreAmount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).SetStoreAmount(ctx, req.(*SetProductAmountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_GetStoreAmount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UuidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).GetStoreAmount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_GetStoreAmount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).GetStoreAmount(ctx, req.(*UuidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProductService_ServiceDesc is the grpc.ServiceDesc for ProductService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProductService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "uas.ProductService",
	HandlerType: (*ProductServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateProduct",
			Handler:    _ProductService_CreateProduct_Handler,
		},
		{
			MethodName: "DeleteProduct",
			Handler:    _ProductService_DeleteProduct_Handler,
		},
		{
			MethodName: "SetStoreCost",
			Handler:    _ProductService_SetStoreCost_Handler,
		},
		{
			MethodName: "SetStoreAmount",
			Handler:    _ProductService_SetStoreAmount_Handler,
		},
		{
			MethodName: "GetStoreAmount",
			Handler:    _ProductService_GetStoreAmount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sms.proto",
}

const (
	SupplyService_CreateSupply_FullMethodName      = "/uas.SupplyService/CreateSupply"
	SupplyService_DeleteSupply_FullMethodName      = "/uas.SupplyService/DeleteSupply"
	SupplyService_UpdateSupplyInfo_FullMethodName  = "/uas.SupplyService/UpdateSupplyInfo"
	SupplyService_GetActiveSupplies_FullMethodName = "/uas.SupplyService/GetActiveSupplies"
	SupplyService_GetSupplyById_FullMethodName     = "/uas.SupplyService/GetSupplyById"
)

// SupplyServiceClient is the client API for SupplyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SupplyServiceClient interface {
	CreateSupply(ctx context.Context, in *CreateSupplyRequest, opts ...grpc.CallOption) (*UuidResponse, error)
	DeleteSupply(ctx context.Context, in *UuidRequest, opts ...grpc.CallOption) (*UuidResponse, error)
	UpdateSupplyInfo(ctx context.Context, in *UpdateSupplyInfoRequest, opts ...grpc.CallOption) (*UuidResponse, error)
	GetActiveSupplies(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetActiveSuppliesResponse, error)
	GetSupplyById(ctx context.Context, in *UuidRequest, opts ...grpc.CallOption) (*SupplyModel, error)
}

type supplyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSupplyServiceClient(cc grpc.ClientConnInterface) SupplyServiceClient {
	return &supplyServiceClient{cc}
}

func (c *supplyServiceClient) CreateSupply(ctx context.Context, in *CreateSupplyRequest, opts ...grpc.CallOption) (*UuidResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UuidResponse)
	err := c.cc.Invoke(ctx, SupplyService_CreateSupply_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supplyServiceClient) DeleteSupply(ctx context.Context, in *UuidRequest, opts ...grpc.CallOption) (*UuidResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UuidResponse)
	err := c.cc.Invoke(ctx, SupplyService_DeleteSupply_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supplyServiceClient) UpdateSupplyInfo(ctx context.Context, in *UpdateSupplyInfoRequest, opts ...grpc.CallOption) (*UuidResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UuidResponse)
	err := c.cc.Invoke(ctx, SupplyService_UpdateSupplyInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supplyServiceClient) GetActiveSupplies(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetActiveSuppliesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetActiveSuppliesResponse)
	err := c.cc.Invoke(ctx, SupplyService_GetActiveSupplies_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supplyServiceClient) GetSupplyById(ctx context.Context, in *UuidRequest, opts ...grpc.CallOption) (*SupplyModel, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SupplyModel)
	err := c.cc.Invoke(ctx, SupplyService_GetSupplyById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SupplyServiceServer is the server API for SupplyService service.
// All implementations must embed UnimplementedSupplyServiceServer
// for forward compatibility.
type SupplyServiceServer interface {
	CreateSupply(context.Context, *CreateSupplyRequest) (*UuidResponse, error)
	DeleteSupply(context.Context, *UuidRequest) (*UuidResponse, error)
	UpdateSupplyInfo(context.Context, *UpdateSupplyInfoRequest) (*UuidResponse, error)
	GetActiveSupplies(context.Context, *emptypb.Empty) (*GetActiveSuppliesResponse, error)
	GetSupplyById(context.Context, *UuidRequest) (*SupplyModel, error)
	mustEmbedUnimplementedSupplyServiceServer()
}

// UnimplementedSupplyServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSupplyServiceServer struct{}

func (UnimplementedSupplyServiceServer) CreateSupply(context.Context, *CreateSupplyRequest) (*UuidResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSupply not implemented")
}
func (UnimplementedSupplyServiceServer) DeleteSupply(context.Context, *UuidRequest) (*UuidResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSupply not implemented")
}
func (UnimplementedSupplyServiceServer) UpdateSupplyInfo(context.Context, *UpdateSupplyInfoRequest) (*UuidResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSupplyInfo not implemented")
}
func (UnimplementedSupplyServiceServer) GetActiveSupplies(context.Context, *emptypb.Empty) (*GetActiveSuppliesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActiveSupplies not implemented")
}
func (UnimplementedSupplyServiceServer) GetSupplyById(context.Context, *UuidRequest) (*SupplyModel, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSupplyById not implemented")
}
func (UnimplementedSupplyServiceServer) mustEmbedUnimplementedSupplyServiceServer() {}
func (UnimplementedSupplyServiceServer) testEmbeddedByValue()                       {}

// UnsafeSupplyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SupplyServiceServer will
// result in compilation errors.
type UnsafeSupplyServiceServer interface {
	mustEmbedUnimplementedSupplyServiceServer()
}

func RegisterSupplyServiceServer(s grpc.ServiceRegistrar, srv SupplyServiceServer) {
	// If the following call pancis, it indicates UnimplementedSupplyServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SupplyService_ServiceDesc, srv)
}

func _SupplyService_CreateSupply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSupplyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupplyServiceServer).CreateSupply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SupplyService_CreateSupply_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupplyServiceServer).CreateSupply(ctx, req.(*CreateSupplyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SupplyService_DeleteSupply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UuidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupplyServiceServer).DeleteSupply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SupplyService_DeleteSupply_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupplyServiceServer).DeleteSupply(ctx, req.(*UuidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SupplyService_UpdateSupplyInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSupplyInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupplyServiceServer).UpdateSupplyInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SupplyService_UpdateSupplyInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupplyServiceServer).UpdateSupplyInfo(ctx, req.(*UpdateSupplyInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SupplyService_GetActiveSupplies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupplyServiceServer).GetActiveSupplies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SupplyService_GetActiveSupplies_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupplyServiceServer).GetActiveSupplies(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SupplyService_GetSupplyById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UuidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupplyServiceServer).GetSupplyById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SupplyService_GetSupplyById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupplyServiceServer).GetSupplyById(ctx, req.(*UuidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SupplyService_ServiceDesc is the grpc.ServiceDesc for SupplyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SupplyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "uas.SupplyService",
	HandlerType: (*SupplyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSupply",
			Handler:    _SupplyService_CreateSupply_Handler,
		},
		{
			MethodName: "DeleteSupply",
			Handler:    _SupplyService_DeleteSupply_Handler,
		},
		{
			MethodName: "UpdateSupplyInfo",
			Handler:    _SupplyService_UpdateSupplyInfo_Handler,
		},
		{
			MethodName: "GetActiveSupplies",
			Handler:    _SupplyService_GetActiveSupplies_Handler,
		},
		{
			MethodName: "GetSupplyById",
			Handler:    _SupplyService_GetSupplyById_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sms.proto",
}
